"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[963],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,a(a({ref:t},p),{},{components:n})):r.createElement(k,a({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),s=(n(7294),n(3905));const o={sidebar_position:2},a="On-Demand",i={unversionedId:"serverless/on-demand",id:"serverless/on-demand",title:"On-Demand",description:"Serverless means applications are only on for the time it takes to process individual requests. They are suspended immediately after each response is sent.",source:"@site/docs/serverless/on-demand.md",sourceDirName:"serverless",slug:"/serverless/on-demand",permalink:"/serverless/on-demand",draft:!1,editUrl:"https://github.com/cyclic-software/docs/blob/main/docs/serverless/on-demand.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/serverless/overview"},next:{title:"Stateless",permalink:"/serverless/stateless"}},l={},c=[{value:"Limitations and Solutions",id:"limitations-and-solutions",level:2},{value:"Sockets",id:"sockets",level:3},{value:"Background Processes",id:"background-processes",level:3},{value:"Cron Tasks",id:"cron-tasks",level:3},{value:"Async/Await",id:"asyncawait",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"on-demand"},"On-Demand"),(0,s.kt)("p",null,"Serverless means applications are only on for the time it takes to process individual requests. They are suspended immediately after each response is sent."),(0,s.kt)("h2",{id:"limitations-and-solutions"},"Limitations and Solutions"),(0,s.kt)("p",null,"This can limit some traditional server use cases:"),(0,s.kt)("h3",{id:"sockets"},"Sockets"),(0,s.kt)("p",null,"Socket connectivity is not available because it requires the server to continuously be connected to a potentially idle client. ",(0,s.kt)("a",{parentName:"p",href:"/troubleshooting/websockets"},"Read more")),(0,s.kt)("admonition",{title:"Workaround",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Some popular socket connection libraries such as ",(0,s.kt)("inlineCode",{parentName:"p"},"SocketIO")," have automatic fallback mechanisms to revert to polling for this scenario. Polling works for many use cases that do not require instantanious real-time push from server. "),(0,s.kt)("p",{parentName:"admonition"},"Keep in mind that polling uses up a lot of requests and chose an appropriate polling rate for your use-case that is not excessive.")),(0,s.kt)("h3",{id:"background-processes"},"Background Processes"),(0,s.kt)("p",null,"Since the environments are driven on and off by network requests. It is impossible to keep a background process running longer than the time it takes to process a single request ",(0,s.kt)("em",{parentName:"p"},"(max 30 seconds)"),". If the background process can be short-lived, you may be able to manage starting alongside your Node.js app."),(0,s.kt)("admonition",{title:"Short-Lived Background Processes",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Even though it is not possible to run a background process longer than it takes to server a request, a short-lived process can be started alongside your Node.js app by scripting it's execution as part of the ",(0,s.kt)("inlineCode",{parentName:"p"},"start")," script in ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json"),".")),(0,s.kt)("h3",{id:"cron-tasks"},"Cron Tasks"),(0,s.kt)("p",null,"Cron tasks are technically long running processes and cannot be run in the same way that they do un a unix environment. You can still build the behavior you need by specifying cron tasks in the Cyclic dashboard."),(0,s.kt)("admonition",{title:"Cron Tasks",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The Cyclic dashboard allows you can configure scheduled requests to specific api routes to run up to once an hour (with one second resolution) or trigger at a specific time (one second resolution).")),(0,s.kt)("h3",{id:"asyncawait"},"Async/Await"),(0,s.kt)("p",null,"Runtimes are suspended immediately after each response is sent. This means all promises must be resolved before a response is returned. "),(0,s.kt)("p",null,"In the following snippet, the ",(0,s.kt)("inlineCode",{parentName:"p"},"db.write")," method takes some time. The database will probably be written to on local or in a persistent environment, but this writing actually happens ",(0,s.kt)("em",{parentName:"p"},"after")," the response ",(0,s.kt)("inlineCode",{parentName:"p"},"ok")," has already been sent."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"  // BAD CODE - Example of not using await before returning\n  router.post('/some_route', requiresAuth(), async (req, res) => {\n    db.write(req.body)\n    res.send('ok')\n  })  \n")),(0,s.kt)("p",null,"A serverless environment is suspended as soon as ",(0,s.kt)("inlineCode",{parentName:"p"},"ok")," is sent, and the write may fail without producing an error. "),(0,s.kt)("p",null,"To avoid these issues, make sure any promises are resolved before sending responses:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"  router.post('/some_route', requiresAuth(), async (req, res) => {\n    await db.write(req.body)\n    return res.send('ok')\n  })  \n")))}u.isMDXComponent=!0}}]);