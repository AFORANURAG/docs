"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(b,o(o({ref:t},c),{},{components:a})):n.createElement(b,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7950:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:4},o="Finishing up with routes to update and delete data",l={unversionedId:"tutorials/rest-api-and-dynamodb/part-4",id:"tutorials/rest-api-and-dynamodb/part-4",title:"Finishing up with routes to update and delete data",description:"We're almost done; but we still must implement two more route handlers: PATCH and DELETE.",source:"@site/docs/tutorials/rest-api-and-dynamodb/part-4.md",sourceDirName:"tutorials/rest-api-and-dynamodb",slug:"/tutorials/rest-api-and-dynamodb/part-4",permalink:"/tutorials/rest-api-and-dynamodb/part-4",draft:!1,editUrl:"https://github.com/cyclic-software/docs/blob/main/docs/tutorials/rest-api-and-dynamodb/part-4.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Creating routes to create and replace data",permalink:"/tutorials/rest-api-and-dynamodb/part-3"},next:{title:"Securing our database with authentication and Deploying our API to the web",permalink:"/tutorials/rest-api-and-dynamodb/part-5"}},s={},p=[{value:"Updating parts of a bike item",id:"updating-parts-of-a-bike-item",level:2},{value:"Deleting a bike item",id:"deleting-a-bike-item",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"finishing-up-with-routes-to-update-and-delete-data"},"Finishing up with routes to update and delete data"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{alt:"Two HTTP routes: delete bike and update parts of bike.",src:"/img/tutorial/rest-api/PATCH__DELETE_Routes.png",width:"640"})),(0,r.kt)("p",null,"We're almost done; but we still must implement two more route handlers: PATCH and DELETE."),(0,r.kt)("p",null,"The former allows clients to update only ",(0,r.kt)("em",{parentName:"p"},"parts")," of a bike item, as opposed to PUT which always replaces the whole thing. The latter is quite self-explanatory and it simply deletes the item in demand."),(0,r.kt)("h2",{id:"updating-parts-of-a-bike-item"},"Updating parts of a bike item"),(0,r.kt)("p",null,"As always, we'll of course get started by extracting data from the HTTP request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Patch bike if it exists\nrouter.patch("/:id", async (req, res) => {\n  const bikeId = req.params.id;\n  const newData = req.body || {};\n});\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"Next step is to check whether or not a bike item with this ID exists, before we update anything."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Patch bike if it exists\nrouter.patch("/:id", async (req, res) => {\n  const bikeId = req.params.id;\n  const newData = req.body || {};\n\n  try {\n    const { props: oldBike } = await bikesCollection.get(bikeId);\n  } catch (e) {\n    console.log(`PATH /bikes/${bikeId}`, e.message);\n    res.sendStatus(404);\n  }\n});\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"After that, we may take advantage of DynamoDB's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html"},"UpdateItem")," command to only replace parts of our bike item:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Save new bike object\nawait bikesCollection.set(bikeId, newData);\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"Let's finish up by sending the full bike object back to the client. We'll take advantage of JavaScript ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"Spread Syntax")," to create that object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const bike = {\n  ...oldBike,\n  ...newData,\n};\n\nres.send(bike);\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"And again, let's try it out:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// request.json (remove this line from the actual file!)\n{\n  "totalInventory": 4,\n  "availableForSale": true\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH -H "Content-Type: application/json" http://localhost:3000/bikes/<ID> -d @request.json | jq . # replace <ID> with an ID from the response to /all\n')),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{alt:"Response to the last command.",src:"/img/tutorial/rest-api/http-patch.svg",width:"640"})),(0,r.kt)("h2",{id:"deleting-a-bike-item"},"Deleting a bike item"),(0,r.kt)("p",null,"It wouldn't be a big stretch to say that this is the simplest route of the bunch."),(0,r.kt)("p",null,"First step is to get the ID from the route parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Delete bike if it exists\nrouter.delete("/:id", async (req, res) => {\n  const bikeId = req.params.id;\n});\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"Following that, we quite simply call one function from Cyclic's DynamoDB library and the job's done!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await bikesCollection.delete(bikeId);\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"We'll do some error handling too and return the deleted item's ID back to the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Delete bike if it exists\nrouter.delete("/:id", async (req, res) => {\n  const bikeId = req.params.id;\n\n  try {\n    await bikesCollection.delete(bikeId);\n\n    res.send({\n      id: bikeId,\n    });\n  } catch (e) {\n    console.log(`DELETE /bikes/${bikeId}`, e.message);\n    res.sendStatus(404);\n  }\n});\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,r.kt)("p",null,"Let's try deleting some data. Make sure to get the ID from your previous calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"/bikes/all"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE http://localhost:3000/bikes/<ID> | jq . # replace <ID> with an ID from the response to /all\n")),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{alt:"Response to the last command.",src:"/img/tutorial/rest-api/http-delete.svg",width:"640"})),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"./part-5"},"final part")," of this series, we'll add authentication to our API to secure access to the bikes database."))}u.isMDXComponent=!0}}]);