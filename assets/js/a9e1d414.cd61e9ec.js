"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[781],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),b=i,m=u["".concat(l,".").concat(b)]||u[b]||d[b]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},o="Creating routes to create and replace data",s={unversionedId:"tutorials/rest-api-and-dynamodb/part-3",id:"tutorials/rest-api-and-dynamodb/part-3",title:"Creating routes to create and replace data",description:"Our API is now given the ability to fetch data in a variety of ways, but it wouldn't be complete if we weren't able to create and replace new and existing items.",source:"@site/docs/tutorials/rest-api-and-dynamodb/part-3.md",sourceDirName:"tutorials/rest-api-and-dynamodb",slug:"/tutorials/rest-api-and-dynamodb/part-3",permalink:"/tutorials/rest-api-and-dynamodb/part-3",draft:!1,editUrl:"https://github.com/cyclic-software/docs/blob/main/docs/tutorials/rest-api-and-dynamodb/part-3.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Creating routes to fetch and search data",permalink:"/tutorials/rest-api-and-dynamodb/part-2"},next:{title:"Finishing up with routes to update and delete data",permalink:"/tutorials/rest-api-and-dynamodb/part-4"}},l={},c=[{value:"Creating a new bike",id:"creating-a-new-bike",level:2},{value:"Replacing a bike item",id:"replacing-a-bike-item",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-routes-to-create-and-replace-data"},"Creating routes to create and replace data"),(0,i.kt)("p",{align:"center"},(0,i.kt)("img",{alt:"Two HTTP routes: create bike and update bike.",src:"/img/tutorial/rest-api/POST__PUT_Routes.png",width:"640"})),(0,i.kt)("p",null,"Our API is now given the ability to fetch data in a variety of ways, but it wouldn't be complete if we weren't able to create and replace new and existing items."),(0,i.kt)("h2",{id:"creating-a-new-bike"},"Creating a new bike"),(0,i.kt)("p",null,"Our RESTful API should have an endpoint that accepts bike data, with ",(0,i.kt)("em",{parentName:"p"},"all")," of its fields except for the ID and handle, which will be both automatically generated within our server."),(0,i.kt)("p",null,"It's worth noting that POST body data can be in a variety of data-types, hinted in the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept"},(0,i.kt)("inlineCode",{parentName:"a"},"Accept"))," HTTP header. But having declared ",(0,i.kt)("inlineCode",{parentName:"p"},"app.use(express.json())")," in our ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," file (it already came with the starter), we can directly access the body data in JSON format by extracting it from the ",(0,i.kt)("inlineCode",{parentName:"p"},"req.body")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Post new bike\nrouter.post("/", authenticateUser, async (req, res) => {\n  const bikeData = req.body;\n});\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,i.kt)("p",null,"Then, it's critical to validate this data. Instead of checking the existence of every field and its value, we can use ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/runtypes"},(0,i.kt)("inlineCode",{parentName:"a"},"runtypes")),",  yet another library whose purpose is to conveniently check the fields of an object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Record, String, Number, Boolean } from "runtypes";\n\n// Type for new bikes\nconst Money = Record({\n  amount: Number,\n  currencyCode: String,\n});\nconst PriceRange = Record({\n  minPrice: Money,\n  maxPrice: Money,\n});\nconst BikeData = Record({\n  title: String,\n  productType: String,\n  createdAt: String,\n  description: String,\n  vendor: String,\n  availableForSale: Boolean,\n  totalInventory: Number,\n  priceRange: PriceRange,\n});\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,i.kt)("p",null,"We can now check the validity of our data by calling one simple method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Create new bike\nrouter.post("/", async (req, res) => {\n  const bikeId = req.params.id;\n  const bikeData = req.body;\n\n  try {\n    // Make sure bike data exists\n    if (!req.body) {\n      throw new Error();\n    }\n\n    // Make sure bike data contains all required fields\n    const bikeObject = BikeData.check(bikeData);\n  } catch (e) {\n    console.log(`POST /bikes/`, e.message);\n    res.sendStatus(400);\n  }\n});\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,i.kt)("p",null,"And before saving this data, we must generate its ID and handle. We'll do the former using ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/uuid"},(0,i.kt)("inlineCode",{parentName:"a"},"uuid")),", a JavaScript library that generates ",(0,i.kt)("inlineCode",{parentName:"p"},"Universally Unique IDentifiers"),", which are guaranteed to be unique every time. The latter, however, will be done using ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/slugify"},(0,i.kt)("inlineCode",{parentName:"a"},"slugify")),', a function that strips text from spaces and replaces it with dashes instead: "Mountains Bike" \u21a6 "Mountains-Bike".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import slugify from "slugify";\nimport { v4 as uuidv4 } from "uuid";\n\n// Generate ID and Handle for bike\nconst bikeId = uuidv4();\nconst bikeHandle = slugify(bikeObject.title).toLowerCase();\n\n// Create full bike object\nconst bike = {\n  ...bikeObject,\n  id: bikeId,\n  handle: bikeHandle,\n};\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,i.kt)("p",null,"And the last step of course is to save this data and send it back to the client. This time, the client will receive a bike object with the ID and handle included:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Save bike object\nawait bikesCollection.set(bikeId, bike);\n\nres.send(bike);\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,i.kt)("p",null,"Let's try it out! We'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"cURL")," to read ",(0,i.kt)("inlineCode",{parentName:"p"},"request.json")," as body data by prefixing it with an @ symbol."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// request.json (remove this line from the actual file!)\n{\n  "productType": "Hybrid Bicycle",\n  "createdAt": "Fri Jan 28 2022 03:13:24 GMT+0100 (GMT+02:00)",\n  "vendor": "Audi",\n  "totalInventory": 2,\n  "availableForSale": false,\n  "priceRange": {\n    "minPrice": {\n      "currencyCode": "USD",\n      "amount": 1160\n    },\n    "maxPrice": {\n      "currencyCode": "USD",\n      "amount": 1624\n    }\n  },\n  "description": "Autem ipsam quasi omnis ut. Et officiis quia. Sed quaerat pariatur nihil nobis est quos earum quidem.",\n  "title": "Hybrid Bicycle Sentra"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -H "Content-Type: application/json" http://localhost:3000/bikes/ -d @request.json | jq .\n')),(0,i.kt)("p",{align:"center"},(0,i.kt)("img",{alt:"Response to the last command.",src:"/img/tutorial/rest-api/http-post.svg",width:"640"})),(0,i.kt)("h2",{id:"replacing-a-bike-item"},"Replacing a bike item"),(0,i.kt)("p",null,"Another common RESTful API endpoint that we must implement is PUT, whose purpose is to replace a bike item instead of creating it. This time, the ID and handle will be already provided, so we don't have to do much instead of validating the data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Update entire bike\nrouter.put("/:id", async (req, res) => {\n  const bikeId = req.params.id;\n  const bikeData = req.body;\n\n  try {\n    // Make sure bike data exists\n    if (!req.body) {\n      throw new Error();\n    }\n\n    // Make sure bike has ID and handle\n    if (!bikeData.id || !bikeData.handle) {\n      throw new Error();\n    }\n\n    // Make sure bike data contains all required fields\n    const bikeObject = BikeData.check(bikeData);\n\n    // Delete existing bike object\n    await bikesCollection.delete(bikeId);\n\n    // Save new bike object\n    await bikesCollection.set(bikeId, bikeObject);\n\n    res.send(bikeObject);\n  } catch (e) {\n    console.log(`PUT bikes/${bikeId}`, e.message);\n    res.sendStatus(404);\n  }\n});\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/cyclic-software/tutorial-bikes-api/blob/main/router.js"},"Link to full code.")),(0,i.kt)("p",null,"What we're doing here is first checking if the bike item exists by retrieving its ID, and we're then validating the data, deleting the existing item and replacing it with a new item."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// request.json (remove this line from the actual file!)\n{\n  "productType": "Hybrid Bicycle",\n  "createdAt": "Fri Jan 28 2022 03:13:24 GMT+0100 (GMT+02:00)",\n  "vendor": "Audi",\n  "totalInventory": 2,\n  "availableForSale": false,\n  "priceRange": {\n    "minPrice": {\n      "currencyCode": "USD",\n      "amount": 1160\n    },\n    "maxPrice": {\n      "currencyCode": "USD",\n      "amount": 1624\n    }\n  },\n  "description": "Autem ipsam quasi omnis ut. Et officiis quia. Sed quaerat pariatur nihil nobis est quos earum quidem.",\n  "title": "Hybrid Bicycle Sentra",\n  "id": "4139c5ae-b83d-4a0c-9b75-12d182aaed7c",\n  "handle": "hybrid-bicycle-sentra"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PUT -H "Content-Type: application/json" http://localhost:3000/bikes/<ID> -d @request.json | jq . # replace <ID> with an ID from the response to /all\n')),(0,i.kt)("p",{align:"center"},(0,i.kt)("img",{alt:"Response to the last command.",src:"/img/tutorial/rest-api/http-put.svg",width:"640"})),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"./part-4"},"next part")," of this series, we'll build the functionality that allows our API to delete and update data in the bikes database."))}d.isMDXComponent=!0}}]);